import OptimizationTestFunctions as otfimport statsmodels.api as smimport pyDOE2 as doeimport numpy as npimport pandas as pdimport patsy as ptdsgn = doe.fullfact([2,2])data = pd.DataFrame(dsgn,columns=["x1","x2"])# dim should be 2 for plotting 3Ddim = 2# Fletcher is good function depends on random seed!seed = 1f1 = otf.Fletcher(dim, seed)noised_func = otf.Transformation(f1, noise_generator = otf.Noises.normal(center = 0, sd = 100)) data['y'] = data.apply(lambda x: noised_func(x.to_list()), axis=1)y, X = pt.dmatrices('y ~ x1 + x2', data=data, return_type='dataframe')mod = sm.OLS(y, X)res = mod.fit()print(res.summary())# # full available functional of plotting# otf.plot_3d(f1, #         points_by_dim = 70, #         title = fr"{type(f1).__name__}\ with\ seed = {seed}", # LaTeX formula notation#         bounds = None, #         show_best_if_exists = True, #         save_as = "Fletcher1.png",#         cmap = 'twilight',#         plot_surface = True,#         plot_heatmap = True)# # show it# otf.plot_3d(noised_func, #         points_by_dim = 70, #         title = "noised",#         bounds = None, #         show_best_if_exists = True, #         save_as = "Trans4.png",#         cmap = 'twilight',#         plot_surface = True,#         plot_heatmap = True)